package com.example.leidong.ldmart.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.xiaolanyun.mart.beans.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BuyerId = new Property(1, Long.class, "buyerId", false, "BUYER_ID");
        public final static Property ProductId = new Property(2, Long.class, "productId", false, "PRODUCT_ID");
        public final static Property OrderId = new Property(3, String.class, "orderId", false, "ORDER_ID");
        public final static Property OrderTime = new Property(4, String.class, "orderTime", false, "ORDER_TIME");
        public final static Property ProductNumber = new Property(5, int.class, "productNumber", false, "PRODUCT_NUMBER");
        public final static Property OrderState = new Property(6, int.class, "orderState", false, "ORDER_STATE");
    };


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BUYER_ID\" INTEGER," + // 1: buyerId
                "\"PRODUCT_ID\" INTEGER," + // 2: productId
                "\"ORDER_ID\" TEXT," + // 3: orderId
                "\"ORDER_TIME\" TEXT," + // 4: orderTime
                "\"PRODUCT_NUMBER\" INTEGER NOT NULL ," + // 5: productNumber
                "\"ORDER_STATE\" INTEGER NOT NULL );"); // 6: orderState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long buyerId = entity.getBuyerId();
        if (buyerId != null) {
            stmt.bindLong(2, buyerId);
        }
 
        Long productId = entity.getProductId();
        if (productId != null) {
            stmt.bindLong(3, productId);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(4, orderId);
        }
 
        String orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindString(5, orderTime);
        }
        stmt.bindLong(6, entity.getProductNumber());
        stmt.bindLong(7, entity.getOrderState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long buyerId = entity.getBuyerId();
        if (buyerId != null) {
            stmt.bindLong(2, buyerId);
        }
 
        Long productId = entity.getProductId();
        if (productId != null) {
            stmt.bindLong(3, productId);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(4, orderId);
        }
 
        String orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindString(5, orderTime);
        }
        stmt.bindLong(6, entity.getProductNumber());
        stmt.bindLong(7, entity.getOrderState());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // buyerId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // productId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orderId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // orderTime
            cursor.getInt(offset + 5), // productNumber
            cursor.getInt(offset + 6) // orderState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBuyerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProductId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setOrderId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrderTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProductNumber(cursor.getInt(offset + 5));
        entity.setOrderState(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
