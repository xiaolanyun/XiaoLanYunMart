package com.example.leidong.ldmart.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.xiaolanyun.mart.beans.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT".
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CategoryId = new Property(1, Long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property ProductName = new Property(2, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property ProductImageUrl = new Property(3, String.class, "productImageUrl", false, "PRODUCT_IMAGE_URL");
        public final static Property ProductPrice = new Property(4, int.class, "productPrice", false, "PRODUCT_PRICE");
        public final static Property ProductStock = new Property(5, int.class, "productStock", false, "PRODUCT_STOCK");
        public final static Property Desc = new Property(6, String.class, "desc", false, "DESC");
    };


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CATEGORY_ID\" INTEGER," + // 1: categoryId
                "\"PRODUCT_NAME\" TEXT," + // 2: productName
                "\"PRODUCT_IMAGE_URL\" TEXT," + // 3: productImageUrl
                "\"PRODUCT_PRICE\" INTEGER NOT NULL ," + // 4: productPrice
                "\"PRODUCT_STOCK\" INTEGER NOT NULL ," + // 5: productStock
                "\"DESC\" TEXT);"); // 6: desc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(2, categoryId);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(3, productName);
        }
 
        String productImageUrl = entity.getProductImageUrl();
        if (productImageUrl != null) {
            stmt.bindString(4, productImageUrl);
        }
        stmt.bindLong(5, entity.getProductPrice());
        stmt.bindLong(6, entity.getProductStock());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(2, categoryId);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(3, productName);
        }
 
        String productImageUrl = entity.getProductImageUrl();
        if (productImageUrl != null) {
            stmt.bindString(4, productImageUrl);
        }
        stmt.bindLong(5, entity.getProductPrice());
        stmt.bindLong(6, entity.getProductStock());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // categoryId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // productName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productImageUrl
            cursor.getInt(offset + 4), // productPrice
            cursor.getInt(offset + 5), // productStock
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // desc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategoryId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProductName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductImageUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProductPrice(cursor.getInt(offset + 4));
        entity.setProductStock(cursor.getInt(offset + 5));
        entity.setDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
